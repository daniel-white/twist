name: Main workflow
on:
  push:
    paths-ignore:
      - "docs/**"
      - "**.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**.md"

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings"
  RUSTUP_MAX_RETRIES: 10
  MACOSX_DEPLOYMENT_TARGET: 10.7

jobs:
  # Run the `rustfmt` code formatter
  rustfmt:
    name: Rustfmt [Formatter]
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Build | Format
        run: cargo fmt --all -- --check

  # Run the `clippy` linting tool
  clippy:
    name: Clippy [Linter]
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-14
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Build | Lint
        run: cargo clippy --workspace --locked --all-targets --all-features -- -D clippy::all
        
  # Ensure that the project could be successfully compiled
  cargo_check:
    name: Compile
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-14
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build | Check
        run: cargo check --workspace --locked

  # Ensure that the project could be successfully compiled with all features enabled
  cargo_check_all_features:
    name: Compile with all features enabled
    needs: cargo_check
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-14
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build | Check
        run: cargo check --workspace --locked --all-features

  # Run tests on Linux and macOS
  # On both Rust stable and Rust nightly
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: cargo_check # First check then run expansive tests
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
          - macos-14
        rust: [stable, nightly]
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2

      # Install all the required dependencies for testing
      - name: Setup | Rust
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: ${{ matrix.rust }}
          components: llvm-tools-preview
          profile: minimal
          override: true

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      # Run the ignored tests that expect the above setup
      - name: Build | Test
        run: "cargo llvm-cov
          --all-features
          --locked
          --workspace
          --lcov --output-path lcov.info
          -- --include-ignored"
        env:
          # Avoid -D warnings on nightly builds
          RUSTFLAGS: ""

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: github.repository == 'daniel-white/twist'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true
